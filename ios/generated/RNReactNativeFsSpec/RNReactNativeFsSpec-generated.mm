/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#import "RNReactNativeFsSpec.h"

@implementation RCTCxxConvert (NativeReactNativeFs_FileOptionsT)
+ (RCTManagedPointer *)JS_NativeReactNativeFs_FileOptionsT:(id)json
{
  return facebook::react::managedPointer<JS::NativeReactNativeFs::FileOptionsT>(json);
}
@end
@implementation RCTCxxConvert (NativeReactNativeFs_NativeDownloadFileOptionsT)
+ (RCTManagedPointer *)JS_NativeReactNativeFs_NativeDownloadFileOptionsT:(id)json
{
  return facebook::react::managedPointer<JS::NativeReactNativeFs::NativeDownloadFileOptionsT>(json);
}
@end
@implementation RCTCxxConvert (NativeReactNativeFs_MkdirOptionsT)
+ (RCTManagedPointer *)JS_NativeReactNativeFs_MkdirOptionsT:(id)json
{
  return facebook::react::managedPointer<JS::NativeReactNativeFs::MkdirOptionsT>(json);
}
@end
@implementation RCTCxxConvert (NativeReactNativeFs_PickFileOptionsT)
+ (RCTManagedPointer *)JS_NativeReactNativeFs_PickFileOptionsT:(id)json
{
  return facebook::react::managedPointer<JS::NativeReactNativeFs::PickFileOptionsT>(json);
}
@end
@implementation RCTCxxConvert (NativeReactNativeFs_TouchOptions)
+ (RCTManagedPointer *)JS_NativeReactNativeFs_TouchOptions:(id)json
{
  return facebook::react::managedPointer<JS::NativeReactNativeFs::TouchOptions>(json);
}
@end
@implementation RCTCxxConvert (NativeReactNativeFs_NativeUploadFileOptionsT)
+ (RCTManagedPointer *)JS_NativeReactNativeFs_NativeUploadFileOptionsT:(id)json
{
  return facebook::react::managedPointer<JS::NativeReactNativeFs::NativeUploadFileOptionsT>(json);
}
@end
namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_addListener(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "addListener", @selector(addListener:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_removeListeners(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "removeListeners", @selector(removeListeners:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_appendFile(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "appendFile", @selector(appendFile:b64:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_copyFile(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "copyFile", @selector(copyFile:into:options:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_downloadFile(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "downloadFile", @selector(downloadFile:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_exists(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "exists", @selector(exists:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_getFSInfo(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "getFSInfo", @selector(getFSInfo:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_hash(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "hash", @selector(hash:algorithm:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_mkdir(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "mkdir", @selector(mkdir:options:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_moveFile(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "moveFile", @selector(moveFile:into:options:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_pickFile(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "pickFile", @selector(pickFile:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_read(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "read", @selector(read:length:position:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_readFile(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "readFile", @selector(readFile:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_readDir(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "readDir", @selector(readDir:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_stat(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "stat", @selector(stat:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_stopDownload(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "stopDownload", @selector(stopDownload:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_stopUpload(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "stopUpload", @selector(stopUpload:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_touch(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "touch", @selector(touch:options:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_unlink(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "unlink", @selector(unlink:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_uploadFiles(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "uploadFiles", @selector(uploadFiles:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_write(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "write", @selector(write:b64:position:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_writeFile(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "writeFile", @selector(writeFile:b64:options:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_copyFileAssets(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "copyFileAssets", @selector(copyFileAssets:into:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_copyFileRes(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "copyFileRes", @selector(copyFileRes:into:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_existsAssets(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "existsAssets", @selector(existsAssets:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_existsRes(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "existsRes", @selector(existsRes:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_getAllExternalFilesDirs(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "getAllExternalFilesDirs", @selector(getAllExternalFilesDirs:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_readFileAssets(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "readFileAssets", @selector(readFileAssets:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_readFileRes(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "readFileRes", @selector(readFileRes:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_readDirAssets(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "readDirAssets", @selector(readDirAssets:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_scanFile(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "scanFile", @selector(scanFile:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_setReadable(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "setReadable", @selector(setReadable:readable:ownerOnly:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_copyAssetsFileIOS(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "copyAssetsFileIOS", @selector(copyAssetsFileIOS:destPath:width:height:scale:compression:resizeMode:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_copyAssetsVideoIOS(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "copyAssetsVideoIOS", @selector(copyAssetsVideoIOS:destPath:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_completeHandlerIOS(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "completeHandlerIOS", @selector(completeHandlerIOS:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_isResumable(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "isResumable", @selector(isResumable:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_pathForBundle(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "pathForBundle", @selector(pathForBundle:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_pathForGroup(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "pathForGroup", @selector(pathForGroup:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_resumeDownload(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "resumeDownload", @selector(resumeDownload:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_copyFolder(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "copyFolder", @selector(copyFolder:into:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_getConstants(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, "getConstants", @selector(getConstants), args, count);
    }

  NativeReactNativeFsSpecJSI::NativeReactNativeFsSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_["addListener"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_addListener};
        
        
        methodMap_["removeListeners"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_removeListeners};
        
        
        methodMap_["appendFile"] = MethodMetadata {2, __hostFunction_NativeReactNativeFsSpecJSI_appendFile};
        
        
        methodMap_["copyFile"] = MethodMetadata {3, __hostFunction_NativeReactNativeFsSpecJSI_copyFile};
        setMethodArgConversionSelector(@"copyFile", 2, @"JS_NativeReactNativeFs_FileOptionsT:");
        
        methodMap_["downloadFile"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_downloadFile};
        setMethodArgConversionSelector(@"downloadFile", 0, @"JS_NativeReactNativeFs_NativeDownloadFileOptionsT:");
        
        methodMap_["exists"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_exists};
        
        
        methodMap_["getFSInfo"] = MethodMetadata {0, __hostFunction_NativeReactNativeFsSpecJSI_getFSInfo};
        
        
        methodMap_["hash"] = MethodMetadata {2, __hostFunction_NativeReactNativeFsSpecJSI_hash};
        
        
        methodMap_["mkdir"] = MethodMetadata {2, __hostFunction_NativeReactNativeFsSpecJSI_mkdir};
        setMethodArgConversionSelector(@"mkdir", 1, @"JS_NativeReactNativeFs_MkdirOptionsT:");
        
        methodMap_["moveFile"] = MethodMetadata {3, __hostFunction_NativeReactNativeFsSpecJSI_moveFile};
        setMethodArgConversionSelector(@"moveFile", 2, @"JS_NativeReactNativeFs_FileOptionsT:");
        
        methodMap_["pickFile"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_pickFile};
        setMethodArgConversionSelector(@"pickFile", 0, @"JS_NativeReactNativeFs_PickFileOptionsT:");
        
        methodMap_["read"] = MethodMetadata {3, __hostFunction_NativeReactNativeFsSpecJSI_read};
        
        
        methodMap_["readFile"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_readFile};
        
        
        methodMap_["readDir"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_readDir};
        
        
        methodMap_["stat"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_stat};
        
        
        methodMap_["stopDownload"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_stopDownload};
        
        
        methodMap_["stopUpload"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_stopUpload};
        
        
        methodMap_["touch"] = MethodMetadata {2, __hostFunction_NativeReactNativeFsSpecJSI_touch};
        setMethodArgConversionSelector(@"touch", 1, @"JS_NativeReactNativeFs_TouchOptions:");
        
        methodMap_["unlink"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_unlink};
        
        
        methodMap_["uploadFiles"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_uploadFiles};
        setMethodArgConversionSelector(@"uploadFiles", 0, @"JS_NativeReactNativeFs_NativeUploadFileOptionsT:");
        
        methodMap_["write"] = MethodMetadata {3, __hostFunction_NativeReactNativeFsSpecJSI_write};
        
        
        methodMap_["writeFile"] = MethodMetadata {3, __hostFunction_NativeReactNativeFsSpecJSI_writeFile};
        setMethodArgConversionSelector(@"writeFile", 2, @"JS_NativeReactNativeFs_FileOptionsT:");
        
        methodMap_["copyFileAssets"] = MethodMetadata {2, __hostFunction_NativeReactNativeFsSpecJSI_copyFileAssets};
        
        
        methodMap_["copyFileRes"] = MethodMetadata {2, __hostFunction_NativeReactNativeFsSpecJSI_copyFileRes};
        
        
        methodMap_["existsAssets"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_existsAssets};
        
        
        methodMap_["existsRes"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_existsRes};
        
        
        methodMap_["getAllExternalFilesDirs"] = MethodMetadata {0, __hostFunction_NativeReactNativeFsSpecJSI_getAllExternalFilesDirs};
        
        
        methodMap_["readFileAssets"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_readFileAssets};
        
        
        methodMap_["readFileRes"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_readFileRes};
        
        
        methodMap_["readDirAssets"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_readDirAssets};
        
        
        methodMap_["scanFile"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_scanFile};
        
        
        methodMap_["setReadable"] = MethodMetadata {3, __hostFunction_NativeReactNativeFsSpecJSI_setReadable};
        
        
        methodMap_["copyAssetsFileIOS"] = MethodMetadata {7, __hostFunction_NativeReactNativeFsSpecJSI_copyAssetsFileIOS};
        
        
        methodMap_["copyAssetsVideoIOS"] = MethodMetadata {2, __hostFunction_NativeReactNativeFsSpecJSI_copyAssetsVideoIOS};
        
        
        methodMap_["completeHandlerIOS"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_completeHandlerIOS};
        
        
        methodMap_["isResumable"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_isResumable};
        
        
        methodMap_["pathForBundle"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_pathForBundle};
        
        
        methodMap_["pathForGroup"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_pathForGroup};
        
        
        methodMap_["resumeDownload"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_resumeDownload};
        
        
        methodMap_["copyFolder"] = MethodMetadata {2, __hostFunction_NativeReactNativeFsSpecJSI_copyFolder};
        
        
        methodMap_["getConstants"] = MethodMetadata {0, __hostFunction_NativeReactNativeFsSpecJSI_getConstants};
        
  }
} // namespace facebook::react
